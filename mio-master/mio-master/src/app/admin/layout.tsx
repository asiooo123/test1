
// This is an autogenerated file from Firebase Studio.
"use client"; // Make this a client component to use hooks

import type { ReactNode } from 'react';
import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/auth-provider';
import { Header } from '@/components/layout/header';
import { Footer } from '@/components/layout/footer';
import { Skeleton } from '@/components/ui/skeleton'; // For loading state

interface AdminLayoutProps {
  children: ReactNode;
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  const { currentUser, isAdmin, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      if (!currentUser) {
        router.push('/login?redirect=/admin'); // Redirect to login if not authenticated
      } else if (!isAdmin) {
        router.push('/'); // Redirect to home if not admin
      }
    }
  }, [currentUser, isAdmin, loading, router]);

  if (loading || !currentUser || !isAdmin) {
    // Show a loading state or a simple message while checking auth
    // Or you can redirect immediately, but a loading state is often better UX
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <main className="flex-grow flex items-center justify-center">
          <div className="space-y-4 p-8 text-center">
            <p>Vérification de l'accès...</p>
            <Skeleton className="h-12 w-12 rounded-full mx-auto" />
            <Skeleton className="h-4 w-[250px] mx-auto" />
            <Skeleton className="h-4 w-[200px] mx-auto" />
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  // If user is admin, render the admin layout
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow bg-secondary/10 py-8">{children}</main>
      <Footer />
    </div>
  );
}
