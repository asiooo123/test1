
// This is an autogenerated file from Firebase Studio.
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/contexts/auth-provider";
import { useToast } from "@/hooks/use-toast";
import { UserPlus } from "lucide-react";
import { PageHeader } from "@/components/common/page-header";

const formSchema = z.object({
  email: z.string().email({ message: "Veuillez saisir une adresse e-mail valide." }),
  password: z.string().min(6, { message: "Le mot de passe doit contenir au moins 6 caractères." }),
  confirmPassword: z.string().min(6, { message: "La confirmation du mot de passe doit contenir au moins 6 caractères." }),
}).refine(data => data.password === data.confirmPassword, {
  message: "Les mots de passe ne correspondent pas.",
  path: ["confirmPassword"], // path of error
});

type SignupFormValues = z.infer<typeof formSchema>;

export default function SignupPage() {
  const { signupWithEmail } = useAuth();
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<SignupFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
      confirmPassword: "",
    },
  });

  async function onSubmit(values: SignupFormValues) {
    try {
      await signupWithEmail(values.email, values.password);
      toast({
        title: "Inscription Réussie!",
        description: "Votre compte a été créé. Vous pouvez maintenant vous connecter.",
      });
      router.push('/login'); 
    } catch (error: any) {
      console.error("Signup Error (full object):", error);
      console.error("Signup Error Code:", error.code);
      console.error("Signup Error Message:", error.message);
      let errorMessage = "Une erreur s'est produite lors de l'inscription. Vérifiez la console du navigateur pour plus de détails.";
      if (error.code === 'auth/email-already-in-use') {
        errorMessage = "Cette adresse e-mail est déjà utilisée. Vérifiez la console du navigateur si le problème persiste.";
      }
      toast({
        title: "Erreur d'Inscription",
        description: errorMessage,
        variant: "destructive",
      });
    }
  }

  return (
    <>
      <PageHeader title="Inscription" description="Créez votre compte pour profiter de toutes nos fonctionnalités." />
      <div className="container mx-auto px-4 pb-16 flex justify-center">
        <Card className="w-full max-w-md shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl">Créer un Compte</CardTitle>
            <CardDescription>Rejoignez la communauté Argile et Art.</CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Adresse e-mail</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="Votre e-mail" {...field} className="bg-background focus:ring-primary"/>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Mot de passe</FormLabel>
                      <FormControl>
                        <Input type="password" placeholder="Votre mot de passe" {...field} className="bg-background focus:ring-primary"/>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="confirmPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Confirmer le mot de passe</FormLabel>
                      <FormControl>
                        <Input type="password" placeholder="Confirmez votre mot de passe" {...field} className="bg-background focus:ring-primary"/>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" className="w-full bg-primary hover:bg-primary/90 text-primary-foreground" disabled={form.formState.isSubmitting}>
                  {form.formState.isSubmitting ? "Inscription en cours..." : (
                    <>
                      <UserPlus className="mr-2 h-4 w-4" /> S'inscrire
                    </>
                  )}
                </Button>
              </form>
            </Form>
          </CardContent>
          <CardFooter className="flex flex-col items-center">
            <p className="mt-4 text-center text-sm text-muted-foreground">
              Déjà un compte ?{' '}
              <Link href="/login" className="underline text-primary hover:text-primary/80">
                Connectez-vous ici
              </Link>
            </p>
          </CardFooter>
        </Card>
      </div>
    </>
  );
}
