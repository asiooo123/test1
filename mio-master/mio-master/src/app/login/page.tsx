
// This is an autogenerated file from Firebase Studio.
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/contexts/auth-provider";
import { useToast } from "@/hooks/use-toast";
import { LogIn } from "lucide-react";
import { PageHeader } from "@/components/common/page-header";

const formSchema = z.object({
  email: z.string().email({ message: "Veuillez saisir une adresse e-mail valide." }),
  password: z.string().min(6, { message: "Le mot de passe doit contenir au moins 6 caractères." }),
});

type LoginFormValues = z.infer<typeof formSchema>;

export default function LoginPage() {
  const { loginWithEmail } = useAuth();
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  async function onSubmit(values: LoginFormValues) {
    try {
      await loginWithEmail(values.email, values.password);
      toast({
        title: "Connexion Réussie!",
        description: "Bienvenue !",
      });
      router.push('/'); // Redirect to home or dashboard
    } catch (error: any) {
      console.error("Login Error (full object):", error);
      console.error("Login Error Code:", error.code);
      console.error("Login Error Message:", error.message);
      let errorMessage = "Une erreur s'est produite lors de la connexion. Vérifiez la console du navigateur pour plus de détails.";
      if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') {
        errorMessage = "Adresse e-mail ou mot de passe incorrect. Vérifiez la console du navigateur si le problème persiste.";
      }
      toast({
        title: "Erreur de Connexion",
        description: errorMessage,
        variant: "destructive",
      });
    }
  }

  return (
    <>
      <PageHeader title="Connexion" description="Accédez à votre compte Argile et Art." />
      <div className="container mx-auto px-4 pb-16 flex justify-center">
        <Card className="w-full max-w-md shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl">Se Connecter</CardTitle>
            <CardDescription>Entrez vos identifiants pour accéder à votre compte.</CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Adresse e-mail</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="Votre e-mail" {...field} className="bg-background focus:ring-primary"/>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Mot de passe</FormLabel>
                      <FormControl>
                        <Input type="password" placeholder="Votre mot de passe" {...field} className="bg-background focus:ring-primary"/>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" className="w-full bg-primary hover:bg-primary/90 text-primary-foreground" disabled={form.formState.isSubmitting}>
                  {form.formState.isSubmitting ? "Connexion en cours..." : (
                    <>
                      <LogIn className="mr-2 h-4 w-4" /> Se Connecter
                    </>
                  )}
                </Button>
              </form>
            </Form>
          </CardContent>
          <CardFooter className="flex flex-col items-center">
            <p className="mt-4 text-center text-sm text-muted-foreground">
              Pas encore de compte ?{' '}
              <Link href="/signup" className="underline text-primary hover:text-primary/80">
                Inscrivez-vous ici
              </Link>
            </p>
          </CardFooter>
        </Card>
      </div>
    </>
  );
}
